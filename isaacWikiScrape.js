// Workflow:
//
// - open the isaac wiki page to scrape (i.e. http://bindingofisaacrebirth.gamepedia.com/Trinkets)
// - type listTables() to help locate the table to scrape
// - set up g_layout to line up the columns to scrape
// - paste this file into the dev console
// - run copy(JSON.stringify(scrapeTable(i))) to generate the item data, paste in an appropriate file
//    NOTE: a div named "copy" might be in the page, you must locate and delete it if copy() fails
//

// THESE NEED UPDATING -------------------------------------------------->
// - there may be more than one table of items to scrape per page, so run for several i's
// - wire the files up in index.html and prepareData() to pull them in at page load time
// - most images have been base64 encoded into spritesheet/base64thumbnails.json, that file is generated by imgURLencoder.js, see that file for details
// <----------------------------------------------------------------------

// Current targets:
// https://bindingofisaacrebirth.gamepedia.com/Items - two tables
// https://bindingofisaacrebirth.gamepedia.com/Trinkets - one table
// https://bindingofisaacrebirth.gamepedia.com/Cards_and_Runes - 12 tables!
var g_itemLayout = { descriptionCol: 4, iconCol: 2 };
var g_runeLayout = { descriptionCol: 5, iconCol: 2 };
var g_cardLayout = g_itemLayout;
var g_trinketLayout = g_itemLayout;

var g_layout = g_itemLayout;
function scrapeTable(tableIndex, itemType)
{
	return scrapeRows(getTable(tableIndex), rowToItem, itemType);
}
function scrapeRows(table, rowScraper, itemType)
{
	const retval = [];
	const nRows = table.rows.length;
	for (var r = 1; r < nRows; ++r)
	{
		const item = rowScraper(table.rows[r], itemType);
		retval.push(item);
	}
	return retval;
}
function rowToItem(row, type)
{
	const name = row.cells[0].textContent.trim();
	const id = name.toLowerCase().trim();

	const item = {
		id,
		name,
		type
	};

	var anchor = getChildTag(row.cells[0], "a") || window.location.href;
	item.wiki = anchor ? anchor.href : window.location.href;

	// cards/runes have the "DLC" icon before the item icon.
	var iconCol = row.cells[g_layout.iconCol];
	var img = getChildTag(iconCol, "img");
	item.thumb = img.src.split('?version=')[0];

	var description = row.cells[g_layout.descriptionCol];
	item.desc = fixUpRelativeURLs(description.innerHTML.trim());
	return item;
}
function getTable(index)
{
	return document.body.getElementsByTagName("table")[index];
}
function listTables()
{
	const tables = document.body.getElementsByTagName("table");
	var i = 0;
	for (table of tables) {
		if (table.rows.length > 1) {
			const headers = table.tHead ? 
				[...table.tHead.rows[0].cells].map(cell => cell.textContent.trim()).join(',') :
				['--'];

			const firstCell = table.rows[1].cells[0].textContent;
			console.log(`table ${i}, headers: [${headers}], first item: ${firstCell}`);
		}
		else {
			console.log(`table ${i} empty`);
		}
		++i;
	}
}
function getChildTag(el, tagName, index)
{
	index = index || 0;

	var elements = el.getElementsByTagName(tagName);
	return elements && (elements.length > index) && elements[index];
}
function fixUpRelativeURLs(html)
{
	return html.replace(/href="/g, `target="_blank" href="${window.location.origin}`);
}
